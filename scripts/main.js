// Generated by CoffeeScript 1.6.3
(function() {
  var CreateMessageView, MessageCollectionView, MessageView, MessageViewApp, _ref, _ref1, _ref2, _ref3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CreateMessageView = (function(_super) {
    __extends(CreateMessageView, _super);

    function CreateMessageView() {
      this.createMessage = __bind(this.createMessage, this);
      _ref = CreateMessageView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CreateMessageView.prototype.el = document.getElementById('#create');

    CreateMessageView.prototype.events = {
      'click .submit-btn': 'createMessage'
    };

    CreateMessageView.prototype.createMessage = function(e) {
      var body, box, newMessage, tags, title, to;
      title = this.$el.find('.title').val();
      body = this.el.find('.body').val();
      tags = this.el.find('.tags').val();
      to = this.$el.find('.to').val();
      box = this.$el.find('.to').val() === 'me' ? 'reminder' : 'outbox';
      newMessage = new Message({
        title: title,
        body: body,
        tags: tags,
        box: box
      });
      if (box === 'outbox') {
        OutboxView.addMessage(newMessage);
      } else {
        ReminderView.addMessage(newMessage);
      }
    };

    return CreateMessageView;

  })(Backbone.View);

  MessageCollectionView = (function(_super) {
    __extends(MessageCollectionView, _super);

    function MessageCollectionView() {
      this.init = __bind(this.init, this);
      this.addOne = __bind(this.addOne, this);
      _ref1 = MessageCollectionView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    MessageCollectionView.prototype.addOne = function(message) {
      this.colleciton.add(message);
      return this.$el.append(new MessageView(message));
    };

    MessageCollectionView.prototype.init = function() {
      return this.collection = new Backbone.Collection();
    };

    return MessageCollectionView;

  })(Backbone.View);

  MessageView = (function(_super) {
    __extends(MessageView, _super);

    function MessageView() {
      this.init = __bind(this.init, this);
      this.render = __bind(this.render, this);
      _ref2 = MessageView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    MessageView.prototype.tagName = 'div';

    MessageView.prototype.className = 'message';

    MessageView.prototype.render = function(message) {
      var output, tag, _i, _len, _ref3;
      output = '<div class=\'title\'>{ message.title  }</div>';
      output += '<div class=\'body\'>{ message.body }</div>';
      _ref3 = message.tags;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        tag = _ref3[_i];
        output += '<div class=\'tag\'> { tag } </div>';
      }
      this.$el.append(output);
      return this.$el;
    };

    MessageView.prototype.init = function(message) {
      return this.render(message);
    };

    return MessageView;

  })(Backbone.View);

  MessageViewApp = (function(_super) {
    __extends(MessageViewApp, _super);

    function MessageViewApp() {
      this.init = __bind(this.init, this);
      _ref3 = MessageViewApp.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    MessageViewApp.prototype.el = document.getElementByTag('body');

    MessageViewApp.prototype.init = function() {
      return chrome.storage.local.get('messages', function(messages) {
        _.each(messages, function(message) {
          var newMessage;
          newMessage = new Message({
            title: message.title,
            body: message.body,
            tags: message.tags,
            box: message.box
          });
          return $('.' + box).append(new MessageView(newMessage));
        });
      });
    };

    return MessageViewApp;

  })(Backbone.View);

  chrome.app.runtime.onLaunched.addListener(function() {
    var CreateView, InboxView, OutboxView, ReminderView;
    chrome.app.window.create('index.html', {
      'bounds': {
        'width': 400,
        'height': 500
      }
    });
    CreateView = new CreateMessageView();
    InboxView = new MessageCollectionView({
      el: document.getElementByClassName('inbox')[0]
    });
    OutboxView = new MessageCollectionView({
      el: document.getElementByClassName('outbox')[0]
    });
    ReminderView = new MessageCollectionView({
      el: document.getElementmentByClassName('reminder')[0]
    });
    return MessageView = new MessageViewApp();
  });

}).call(this);
